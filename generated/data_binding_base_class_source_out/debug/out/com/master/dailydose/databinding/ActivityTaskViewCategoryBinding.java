// Generated by view binder compiler. Do not edit!
package com.master.dailydose.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.master.dailydose.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTaskViewCategoryBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView canceledTaskLabel;

  @NonNull
  public final RecyclerView canceledTaskList;

  @NonNull
  public final TextView completedTaskLabel;

  @NonNull
  public final RecyclerView completedTaskList;

  @NonNull
  public final ScrollView main;

  @NonNull
  public final TextView ongoingTaskLabel;

  @NonNull
  public final RecyclerView ongoingTaskList;

  @NonNull
  public final TextView pendingTaskLabel;

  @NonNull
  public final RecyclerView pendingTaskList;

  private ActivityTaskViewCategoryBinding(@NonNull ScrollView rootView,
      @NonNull TextView canceledTaskLabel, @NonNull RecyclerView canceledTaskList,
      @NonNull TextView completedTaskLabel, @NonNull RecyclerView completedTaskList,
      @NonNull ScrollView main, @NonNull TextView ongoingTaskLabel,
      @NonNull RecyclerView ongoingTaskList, @NonNull TextView pendingTaskLabel,
      @NonNull RecyclerView pendingTaskList) {
    this.rootView = rootView;
    this.canceledTaskLabel = canceledTaskLabel;
    this.canceledTaskList = canceledTaskList;
    this.completedTaskLabel = completedTaskLabel;
    this.completedTaskList = completedTaskList;
    this.main = main;
    this.ongoingTaskLabel = ongoingTaskLabel;
    this.ongoingTaskList = ongoingTaskList;
    this.pendingTaskLabel = pendingTaskLabel;
    this.pendingTaskList = pendingTaskList;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTaskViewCategoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTaskViewCategoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_task_view_category, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTaskViewCategoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.canceled_task_label;
      TextView canceledTaskLabel = ViewBindings.findChildViewById(rootView, id);
      if (canceledTaskLabel == null) {
        break missingId;
      }

      id = R.id.canceled_task_list;
      RecyclerView canceledTaskList = ViewBindings.findChildViewById(rootView, id);
      if (canceledTaskList == null) {
        break missingId;
      }

      id = R.id.completed_task_label;
      TextView completedTaskLabel = ViewBindings.findChildViewById(rootView, id);
      if (completedTaskLabel == null) {
        break missingId;
      }

      id = R.id.completed_task_list;
      RecyclerView completedTaskList = ViewBindings.findChildViewById(rootView, id);
      if (completedTaskList == null) {
        break missingId;
      }

      ScrollView main = (ScrollView) rootView;

      id = R.id.ongoing_task_label;
      TextView ongoingTaskLabel = ViewBindings.findChildViewById(rootView, id);
      if (ongoingTaskLabel == null) {
        break missingId;
      }

      id = R.id.ongoing_task_list;
      RecyclerView ongoingTaskList = ViewBindings.findChildViewById(rootView, id);
      if (ongoingTaskList == null) {
        break missingId;
      }

      id = R.id.pending_task_label;
      TextView pendingTaskLabel = ViewBindings.findChildViewById(rootView, id);
      if (pendingTaskLabel == null) {
        break missingId;
      }

      id = R.id.pending_task_list;
      RecyclerView pendingTaskList = ViewBindings.findChildViewById(rootView, id);
      if (pendingTaskList == null) {
        break missingId;
      }

      return new ActivityTaskViewCategoryBinding((ScrollView) rootView, canceledTaskLabel,
          canceledTaskList, completedTaskLabel, completedTaskList, main, ongoingTaskLabel,
          ongoingTaskList, pendingTaskLabel, pendingTaskList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
